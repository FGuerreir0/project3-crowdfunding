{"ast":null,"code":"import axios from 'axios';\nconst baseUserService = axios.create({\n  baseURL: '/user'\n});\n\nconst getUserById = id => {\n  return baseUserService.get(`/${id}`).then(result => {\n    const user = result.data.user;\n    return Promise.resolve(user);\n  }).catch(err => {\n    return Promise.reject(err);\n  });\n};\n\nconst updateUser = body => {\n  return baseUserService.post(`/${body._id}/edit`, body).then(result => {\n    const user = result.data.user;\n    return Promise.resolve(user);\n  }).catch(err => {\n    return Promise.reject(err);\n  });\n};\n\nconst getActionsByUserId = userId => {\n  return baseUserService.get(`/${userId}/actions`).then(result => {\n    const actions = result.data.actions;\n    return Promise.resolve(actions);\n  }).catch(err => {\n    return Promise.reject(err);\n  });\n};\n\nconst getProjectsByUserId = userId => {\n  return baseUserService.get(`/${userId}/projects`).then(result => {\n    const projects = result.data.projects;\n    return Promise.resolve(projects);\n  }).catch(err => {\n    return Promise.reject(err);\n  });\n};\n\nexport { getProjectsByUserId, getActionsByUserId, updateUser, getUserById };","map":{"version":3,"sources":["/Users/fguerreir0/ironhack/projects/project3-crowdfunding/client/src/services/user.jsx"],"names":["axios","baseUserService","create","baseURL","getUserById","id","get","then","result","user","data","Promise","resolve","catch","err","reject","updateUser","body","post","_id","getActionsByUserId","userId","actions","getProjectsByUserId","projects"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,MAAMC,eAAe,GAAGD,KAAK,CAACE,MAAN,CAAa;AACnCC,EAAAA,OAAO,EAAE;AAD0B,CAAb,CAAxB;;AAIA,MAAMC,WAAW,GAAIC,EAAD,IAAQ;AAC1B,SAAOJ,eAAe,CACnBK,GADI,CACC,IAAGD,EAAG,EADP,EAEJE,IAFI,CAEEC,MAAD,IAAY;AAChB,UAAMC,IAAI,GAAGD,MAAM,CAACE,IAAP,CAAYD,IAAzB;AACA,WAAOE,OAAO,CAACC,OAAR,CAAgBH,IAAhB,CAAP;AACD,GALI,EAMJI,KANI,CAMGC,GAAD,IAAS;AACd,WAAOH,OAAO,CAACI,MAAR,CAAeD,GAAf,CAAP;AACD,GARI,CAAP;AASD,CAVD;;AAYA,MAAME,UAAU,GAAIC,IAAD,IAAU;AAC3B,SAAOhB,eAAe,CACnBiB,IADI,CACE,IAAGD,IAAI,CAACE,GAAI,OADd,EACsBF,IADtB,EAEJV,IAFI,CAEEC,MAAD,IAAY;AAChB,UAAMC,IAAI,GAAGD,MAAM,CAACE,IAAP,CAAYD,IAAzB;AACA,WAAOE,OAAO,CAACC,OAAR,CAAgBH,IAAhB,CAAP;AACD,GALI,EAMJI,KANI,CAMGC,GAAD,IAAS;AACd,WAAOH,OAAO,CAACI,MAAR,CAAeD,GAAf,CAAP;AACD,GARI,CAAP;AASD,CAVD;;AAYA,MAAMM,kBAAkB,GAAIC,MAAD,IAAY;AACrC,SAAOpB,eAAe,CACnBK,GADI,CACC,IAAGe,MAAO,UADX,EAEJd,IAFI,CAEEC,MAAD,IAAY;AAChB,UAAMc,OAAO,GAAGd,MAAM,CAACE,IAAP,CAAYY,OAA5B;AACA,WAAOX,OAAO,CAACC,OAAR,CAAgBU,OAAhB,CAAP;AACD,GALI,EAMJT,KANI,CAMGC,GAAD,IAAS;AACd,WAAOH,OAAO,CAACI,MAAR,CAAeD,GAAf,CAAP;AACD,GARI,CAAP;AASD,CAVD;;AAYA,MAAMS,mBAAmB,GAAIF,MAAD,IAAY;AACtC,SAAOpB,eAAe,CACnBK,GADI,CACC,IAAGe,MAAO,WADX,EAEJd,IAFI,CAEEC,MAAD,IAAY;AAChB,UAAMgB,QAAQ,GAAGhB,MAAM,CAACE,IAAP,CAAYc,QAA7B;AACA,WAAOb,OAAO,CAACC,OAAR,CAAgBY,QAAhB,CAAP;AACD,GALI,EAMJX,KANI,CAMGC,GAAD,IAAS;AACd,WAAOH,OAAO,CAACI,MAAR,CAAeD,GAAf,CAAP;AACD,GARI,CAAP;AASD,CAVD;;AAYA,SAASS,mBAAT,EAA8BH,kBAA9B,EAAkDJ,UAAlD,EAA8DZ,WAA9D","sourcesContent":["import axios from 'axios';\n\nconst baseUserService = axios.create({\n  baseURL: '/user'\n});\n\nconst getUserById = (id) => {\n  return baseUserService\n    .get(`/${id}`)\n    .then((result) => {\n      const user = result.data.user;\n      return Promise.resolve(user);\n    })\n    .catch((err) => {\n      return Promise.reject(err);\n    });\n};\n\nconst updateUser = (body) => {\n  return baseUserService\n    .post(`/${body._id}/edit`, body)\n    .then((result) => {\n      const user = result.data.user;\n      return Promise.resolve(user);\n    })\n    .catch((err) => {\n      return Promise.reject(err);\n    });\n};\n\nconst getActionsByUserId = (userId) => {\n  return baseUserService\n    .get(`/${userId}/actions`)\n    .then((result) => {\n      const actions = result.data.actions;\n      return Promise.resolve(actions);\n    })\n    .catch((err) => {\n      return Promise.reject(err);\n    });\n};\n\nconst getProjectsByUserId = (userId) => {\n  return baseUserService\n    .get(`/${userId}/projects`)\n    .then((result) => {\n      const projects = result.data.projects;\n      return Promise.resolve(projects);\n    })\n    .catch((err) => {\n      return Promise.reject(err);\n    });\n};\n\nexport { getProjectsByUserId, getActionsByUserId, updateUser, getUserById };\n"]},"metadata":{},"sourceType":"module"}